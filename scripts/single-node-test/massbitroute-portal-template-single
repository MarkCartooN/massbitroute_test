
resource "google_compute_instance" "mbr-portal-new-commit-test" {
  name         = "${var.project_prefix}-${var.environment}-portal-test-[[NODE_ID]]"
  machine_type = var.map_machine_types["mbr-core"]
  zone         = "${var.default_zone}"

  tags = ["http-server", "https-server"]

  boot_disk {
    initialize_params {
      image = "projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20210720"
      size = 2000
    }
  }

  network_interface {
    network = "${var.network_interface}"

    access_config {
      // Ephemeral IP
    }
  }

  metadata_startup_script =  <<EOH
  #!/bin/bash
  #-------------------------------------------
  #  Update host file for Massbitroute.dev
  #-------------------------------------------
#   sudo echo '
# 127.0.0.1 hostmaster.massbitroute.dev
# 127.0.0.1 ns1.massbitroute.dev
# 127.0.0.1 ns2.massbitroute.dev
# 127.0.0.1 massbitroute.devdmin.massbitroute.dev
# 127.0.0.1 dapi.massbitroute.dev
# 127.0.0.1 massbitroute.devpi.massbitroute.dev
# 127.0.0.1 portal.massbitroute.dev
# 127.0.0.1 dev.massbitroute.dev
# 127.0.0.1 staging.massbitroute.dev
# 127.0.0.1 production.massbitroute.dev
# 127.0.0.1 status.dapi.massbitroute.dev
# 127.0.0.1 session.mbr.massbitroute.dev
# 127.0.0.1 monitor.mbr.massbitroute.dev
# 127.0.0.1 glmr1.bc.massbitroute.dev
# 127.0.0.1 dot1.bc.massbitroute.dev
# 127.0.0.1 chain.massbitroute.dev
# 127.0.0.1 staking.massbitroute.dev

# 127.0.0.1 verify.massbitroute.dev
# 127.0.0.1 fisherman.massbitroute.dev
# 127.0.0.1 stat.mbr.massbitroute.dev' >> /etc/hosts

    sudo sed 's/#DNSStubListener=yes/DNSStubListener=no/' /etc/systemd/resolved.conf -i
    sudo pkill -f systemd-resolve

    sudo systemctl stop systemd-resolved
    sudo systemctl disable systemd-resolved 
    sudo echo nameserver 8.8.8.8 >/etc/resolv.conf

  #-------------------------------------------
  #  Install frontend API
  #-------------------------------------------
  chmod 400 /root/.ssh/id_rsa

  sudo apt install redis-server npm -y
  sudo systemctl enable redis-server
  sudo npm install --global yarn
  sudo npm cache clean -f
  sudo npm install -g n
  sudo n stable
  sudo yarn global add pm2


  # Portal API
  sudo mkdir /opt/user-management
  sudo git clone git@github.com:massbitprotocol/user-management.git -b staging /opt/user-management
  cd /opt/user-management
  sudo yarn
  sudo yarn build
  sudo pm2 start

  # staking APi
  sudo mkdir /opt/test-massbit-staking
  sudo git clone git@github.com:mison201/test-massbit-staking.git  /opt/test-massbit-staking
  cd /opt/test-massbit-staking
  sudo yarn
  sudo yarn build
  sudo pm2 start

  sudo apt update && sudo apt upgrade -y && sudo apt install curl nginx -y
  sudo apt install software-properties-common

  echo "
server {
    server_name portal.massbitroute.dev;
    listen 80;
    return 301 https://$host$request_uri;
}
server {
    server_name portal.massbitroute.dev;
    listen 443 ssl;
    ssl_certificate /opt/portal/ssl/fullchain1.pem;
    ssl_certificate_key /opt/portal/ssl/privkey1.pem;
    location / {
       #add_header 'Access-Control-Allow-Origin' 'dapi.massbitroute.dev';
       #add_header 'Access-Control-Allow-Credentials' 'true';
       if ($request_method = 'OPTIONS') {
         add_header 'Access-Control-Allow-Origin' "$http_origin";
         add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
         add_header 'Access-Control-Allow-Credentials' 'true' always;
         #
         # Custom headers and headers various browsers *should* be OK with but aren't
         #
         add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
         #
         # Tell client that this pre-flight info is valid for 20 days
         #
         add_header 'Access-Control-Max-Age' 1728000;
         add_header 'Content-Type' 'text/plain; charset=utf-8';
         add_header 'Content-Length' 0;
         return 204;
      }
      if ($request_method = 'POST') {
         #add_header 'Access-Control-Allow-Origin' '$http_origin' always;
         #add_header 'Access-Control-Allow-Credentials' 'true' always;
         add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
         add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
         add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range, Authorization' always;
      }
      if ($request_method = 'GET') {
         #add_header 'Access-Control-Allow-Origin' '$http_origin' always;
         add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
         add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
         add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range, Authorization' always;
      }
      proxy_buffering off;
      proxy_pass http://localhost:3002;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_read_timeout 86400s;
      proxy_send_timeout 86400s;
    }
}
" > /etc/nginx/sites-enabled/portal

echo "
server {
    server_name staking.massbitroute.dev;
    #rewrite server_name ^ > melea.trust;
    #rewrite ^ > my-dns-ip-here.com;
    #
    root /var/www/staking.massbitroute.dev/html/index.html;
    #rewrite ^ >root /var/www/melea.trust/html/index.html;
    # Add index.php to the list if you are using PHP
    index index.html index.htm;
    #
    location / {
        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        access_log on;
        proxy_pass http://127.0.0.1:3005;
    }




    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/staking.massbitroute.dev/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/staking.massbitroute.dev/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}


server {
    if ($host = staking.massbitroute.dev) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    server_name staking.massbitroute.dev;

    listen 80;
    return 404; # managed by Certbot


}
" > /etc/nginx/sites-enabled/staking

  sudo service nginx reload

  EOH


  service_account {
    # Google recommends custom service.massbitroute.devccounts that have cloud-platform scope.massbitroute.devnd permissions granted via IAM Roles.
    email = "${var.email}"
    scopes = ["cloud-platform"]
  }

  

}

output "mbr_portal_public_ip" {
  description = "Public IP of new.massbitroute.devPI VM"
  value = google_compute_instance.mbr-portal-new-commit-test.network_interface.0.access_config.0.nat_ip
}

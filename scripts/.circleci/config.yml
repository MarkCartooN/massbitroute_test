version: 2.1

jobs:
  test_nodes:
    docker:
      - image: hoanito/mbr-ubuntu:1.1
        # auth:
        #   username: mydockerhub-user
        #   password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    steps:
      - run: mkdir -p /massbitroute/nodetest && cd /massbitroute/nodetest
      - checkout
      - run: 
        name: Set up variables
        command: |
          bearer="eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI4MTFjMzc4Mi0yNzk0LTQ0MjMtYWEwMi0zYjAwOGZkYTQzOGQiLCJpYXQiOjE2NDg3ODg2NTgsImV4cCI6MTY0ODg3NTA1OH0.T-RNKU_x-hmnThiBaO9YA1K4T_yqdCOcrgFQs1GOFbo5992ifqUlfGE7k0vSC4lmgv2Rh4nvg090BhkhMTYfRyctJmGgByAa-ayvbf1slCBR1tpJLjWZmQA1M0rwQhY559UsGCmeEqMgEH8pE6BvWtIAVsbWfS_8gIDEx7RBHWxasEwAft1-rkedxu2oYDwLndzdW9ARNYAZZ9U7FrnbYltOStlFNpcnCDq-WxSo6pDkJG5EgkrRyVxY-kBT37oJyNhM8m9iQTI5E7FgGeCkqiH54siFl8nEohYg_M6nTDZeE1Hl3oMQfR67ab4Yudg9ZGNYCEFLQ0m6ZDYcPC6FLQ"
          blockchain="eth"
          dataSource="http:\/\/34.124.230.213:8545"
          nodePrefix="$(echo $RANDOM | md5sum | head -c 5)"
          GATEWAY_ID="bfc8fdbf-7453-4e99-9832-f386ad20b7c2"
          NODE_ID="441d7752-900c-4a6f-894f-5a288513c247"
          MEMONIC="peanut thank prevent burden erode welcome dust one develop code lamp rule"
      - run: 
        name: Clean up files
        command: |
          sudo echo -n >gatewaylist.csv
          sudo echo -n >nodelist.csv

          sudo echo 'variable "project_prefix" {
            type        = string
            description = "The project prefix (mbr)."
          }
          variable "environment" {
            type        = string
            description = "Environment: dev, test..."
          }
          variable "default_zone" {
            type = string
          }
          variable "network_interface" {
            type = string
          }
          variable "email" {
            type = string
          }
          variable "map_machine_types" {
            type = map
          }' >test-nodes.tf
      - run:
        name: Create node and gateway in Portal
        command: |
          sudo curl -s --location --request POST 'https://portal.massbitroute.dev/mbr/node' \
          --header "Authorization: Bearer  $bearer" \
          --header 'Content-Type: application/json' \
          --data-raw "{
              \"name\": \"mb-dev-node-$nodePrefix\",
              \"blockchain\": \"$blockchain\",
              \"zone\": \"AS\",
              \"dataSource\": \"$dataSource\",
              \"network\": \"mainnet\"
          }" | jq -r '. | .id, .appKey' | sed -z -z 's/\n/,/g;s/,$/,AS\n/' >nodelist.csv

        sudo curl -s --location --request POST 'https://portal.massbitroute.dev/mbr/gateway' \
        --header "Authorization: Bearer  $bearer" \
        --header 'Content-Type: application/json' \
        --data-raw "{
          \"name\":\"MB-dev-gateway-$nodePrefix\",
          \"blockchain\":\"$blockchain\",
          \"zone\":\"AS\",
          \"network\":\"mainnet\"}" | jq -r '. | .id, .appKey' | sed -z -z 's/\n/,/g;s/,$/,AS\n/' >gatewaylist.csv
      - run:
        name: Check if node and gw are created in Portal successfully
        command: |
          GATEWAY_ID=$(cut -d ',' -f 1 gatewaylist.csv <<<tail)
          NODE_ID=$(cut -d ',' -f 1 nodelist.csv <<<tail)
          # curl node info
          echo "Create new node and gw in Portal: In Progress"
          gateway_reponse_code=$(curl -o /dev/null -s -w "%{http_code}\n" "https://portal.massbitroute.dev/mbr/gateway/$GATEWAY_ID" --header "Authorization: Bearer $bearer")
          if [[ $gateway_reponse_code != 200 ]]; then
            echo "Create new gw in Portal: Failed"
            exit 1
          fi
          echo "Create new gw in Portal: Passed"

          node_reponse_code=$(curl -o /dev/null -s -w "%{http_code}\n" "https://portal.massbitroute.dev/mbr/node/$NODE_ID" --header "Authorization: Bearer $bearer")
          if [[ $node_reponse_code != 200 ]]; then
            echo "Create new node in Portal: Failed"
            exit 1
          fi
          echo "Create new node in Portal: Passed"
      - run:
        name: Generate tf files
        command: |
          while IFS="," read -r nodeId appId zone; do
            cat gateway-template-single | sed "s/\[\[GATEWAY_ID\]\]/$nodeId/g" | sed "s/\[\[APP_KEY\]\]/$appId/g" |
              sed "s/\[\[ZONE\]\]/$zone/g" | sed "s/\[\[BLOCKCHAIN\]\]/$blockchain/g" >>test-nodes.tf
          done < <(tail gatewaylist.csv)

          while IFS="," read -r nodeId appId zone; do
            cat node-template-single | sed "s/\[\[GATEWAY_ID\]\]/$nodeId/g" | sed "s/\[\[APP_KEY\]\]/$appId/g" |
              sed "s/\[\[ZONE\]\]/$zone/g" | sed "s/\[\[BLOCKCHAIN\]\]/$blockchain/g" | sed "s/\[\[DATASOURCE\]\]/$dataSource/g" >>test-nodes.tf
          done < <(tail nodelist.csv)
      - run:
        name: Spin up VMs on GCE
        command: |
          echo "Create node VMs on GCE: In Progress"
          terraform init -input=false
          if [[ "$?" != "0" ]]; then
            echo "Faile to execute: terraform init "
            exit 1
          fi
          sudo terraform plan -out=tfplan -input=false
          if [[ "$?" != "0" ]]; then
            echo "Faile to execute: terraform plan "
            exit 1
          fi
          sudo terraform apply -input=false tfplan
          if [[ "$?" != "0" ]]; then
            echo "Faile to execute: terraform apply "
            exit 1
          fi
          echo "Create node VMs on GCE: Passed"

          echo "Waiting for nodes to set up"
          sleep 300


      - run:
        name: Check if node and gateway are verified
        command: |
          while [[ "$gateway_status" != "verified" ]] && [[ "$node_status" != "verified" ]]; do
            echo "Checking node status: In Progress"


            gateway_status=$(curl -s --location --request GET "https://portal.massbitroute.dev/mbr/gateway/$GATEWAY_ID" \
              --header "Authorization: Bearer $bearer" | jq -r ". | .status")

            node_status=$(curl -s --location --request GET "https://portal.massbitroute.dev/mbr/node/$NODE_ID" \
              --header "Authorization: Bearer $bearer" | jq -r ". | .status")

            echo "---------------------------------"
            echo "Gateway status: $gateway_status"
            echo "Node status: $node_status"
            echo "---------------------------------"
            sleep 10
          done
          echo "Checking node status: Passed"

      - run:
        name: Clean up GCE VMs
        command: |
          echo "Cleaning up VMs: In Progress"
          terraform destroy -auto-approve
          if [[ "$?" != "0" ]]; then
            echo "Failed to execute: terraform destroy "
            exit 1
          fi
          echo "Cleaning up VMs: Passed"
 
# Orchestrate our job run sequence
workflows:
  massbitroute-ci:
    jobs:
      - test_nodes
